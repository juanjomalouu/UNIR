pipeline {
    agent { label 'node1' }
    stages {
        stage('Get Code') {
            steps {
                bat ''' 
                    whoami
                    hostname
                    dir
                    echo ${WORKSPACE}
                '''
                //Obtener código del repo
                git 'https://github.com/juanjomalouu/UNIR.git'
                echo WORKSPACE
                stash name: 'code', includes: '**'
                
            }
        }
        stage('Tests'){
            parallel{
                stage('Unit'){
                    agent { label 'node2'}
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'code'
                            bat '''
                                whoami
                                hostname
                                dir
                                echo ${WORKSPACE}
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-unit.xml test\\unit
                            '''
                            junit 'result-unit.xml'
                            
                            stash name: 'unit results', includes: 'result-unit.xml'
                        }
                    }
                }
        
                stage('Static') {
                    agent { label 'node2' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'code'
                            bat '''
                                whoami
                                hostname
                                dir
                                echo ${WORKSPACE}
                                flake8 --exit-zero --format=pylint app  1>flake8.out 
                            '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                            stash name: 'static results', includes: 'flake8.out'
                        }
                    }
                }
                
                stage('Security') {
                    agent { label 'node2'}
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'code'
                            bat '''
                                whoami
                                hostname
                                dir
                                echo ${WORKSPACE}
                                bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                            '''
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                            stash name: 'security results', includes: 'bandit.out'
                        }
                    }
                }
                stage('Performance') {
                    agent { label 'node3' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'code'
                            bat '''
                                whoami
                                hostname
                                dir
                                echo ${WORKSPACE}
                                SET FLASK_APP=app\\api.py
                                START flask run 
                                echo "Esperando a que Flask esté disponible..."
                                for /L %%i in (1,1,10) do (
                                    curl -s -o NUL -w "%%{http_code}" http://localhost:5000 | findstr "200" && exit /b 0
                                    timeout /t 2 > NUL
                                )
                                echo "Flask no está disponible tras varios intentos"
                                exit /b 1
                                jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                            '''
                            perfReport sourceDataFiles: 'flask.jtl'
                            stash name: 'performance results', includes: 'flask.jtl'
                        }
                    }
                }
                
                stage('Coverage')
                {
                    agent { label 'node3' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'code'
                            bat '''
                                whoami
                                hostname
                                dir
                                echo ${WORKSPACE}
                                coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py
                                coverage xml
                            '''
                            cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, conditionalCoverageTargets: '90,0,80', lineCoverageTargets: '95,0,85'
                            stash name: 'coverage results', includes: 'coverage.xml'
                        }
                    }
                }
            }
        }
    }
}