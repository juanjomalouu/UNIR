<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="5" time="12.332" timestamp="2024-12-09T22:26:35.047218+01:00" hostname="DESKTOP-9D7R2LB"><testcase classname="test.rest.api_test.TestApi" name="test_api_add" time="2.020" /><testcase classname="test.rest.api_test.TestApi" name="test_api_divide" time="2.010" /><testcase classname="test.rest.api_test.TestApi" name="test_api_divide_zero" time="2.022" /><testcase classname="test.rest.api_test.TestApi" name="test_api_multiply" time="2.032" /><testcase classname="test.rest.api_test.TestApi" name="test_api_sqrt" time="4.029"><failure message="urllib.error.URLError: &lt;urlopen error timed out&gt;">self = &lt;urllib.request.HTTPHandler object at 0x00000210DF1074F0&gt;, http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;urllib.request.Request object at 0x00000210DF107C70&gt;, http_conn_args = {}, host = 'localhost:9090'
h = &lt;http.client.HTTPConnection object at 0x00000210DF107CA0&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update({k: v for k, v in req.headers.items()
                        if k not in headers})
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = {name.title(): val for name, val in headers.items()}
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
&gt;               h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))

C:\Program Files\Python310\lib\urllib\request.py:1348: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python310\lib\http\client.py:1282: in request
    self._send_request(method, url, body, headers, encode_chunked)
C:\Program Files\Python310\lib\http\client.py:1328: in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
C:\Program Files\Python310\lib\http\client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
C:\Program Files\Python310\lib\http\client.py:1037: in _send_output
    self.send(msg)
C:\Program Files\Python310\lib\http\client.py:975: in send
    self.connect()
C:\Program Files\Python310\lib\http\client.py:941: in connect
    self.sock = self._create_connection(
C:\Program Files\Python310\lib\socket.py:845: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = ('localhost', 9090), timeout = 2, source_address = None

    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None):
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        A host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        err = None
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket(af, socktype, proto)
                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               TimeoutError: timed out

C:\Program Files\Python310\lib\socket.py:833: TimeoutError

During handling of the above exception, another exception occurred:

self = &lt;rest.api_test.TestApi testMethod=test_api_sqrt&gt;

    def test_api_sqrt(self):
        url = f"{BASE_URL_MOCK}/calc/sqrt/64"
&gt;       response = urlopen(url, timeout=DEFAULT_TIMEOUT)

test\rest\api_test.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files\Python310\lib\urllib\request.py:216: in urlopen
    return opener.open(url, data, timeout)
C:\Program Files\Python310\lib\urllib\request.py:519: in open
    response = self._open(req, data)
C:\Program Files\Python310\lib\urllib\request.py:536: in _open
    result = self._call_chain(self.handle_open, protocol, protocol +
C:\Program Files\Python310\lib\urllib\request.py:496: in _call_chain
    result = func(*args)
C:\Program Files\Python310\lib\urllib\request.py:1377: in http_open
    return self.do_open(http.client.HTTPConnection, req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib.request.HTTPHandler object at 0x00000210DF1074F0&gt;, http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;urllib.request.Request object at 0x00000210DF107C70&gt;, http_conn_args = {}, host = 'localhost:9090'
h = &lt;http.client.HTTPConnection object at 0x00000210DF107CA0&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update({k: v for k, v in req.headers.items()
                        if k not in headers})
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = {name.title(): val for name, val in headers.items()}
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
                h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))
            except OSError as err: # timeout error
&gt;               raise URLError(err)
E               urllib.error.URLError: &lt;urlopen error timed out&gt;

C:\Program Files\Python310\lib\urllib\request.py:1351: URLError</failure></testcase></testsuite></testsuites>